// Code generated by "enumer -type=MessagesStopReason -linecomment -json=true -text=true"; DO NOT EDIT.

package message

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _MessagesStopReasonName = "end_turnmax_tokensstop_sequence"

var _MessagesStopReasonIndex = [...]uint8{0, 8, 18, 31}

const _MessagesStopReasonLowerName = "end_turnmax_tokensstop_sequence"

func (i MessagesStopReason) String() string {
	if i < 0 || i >= MessagesStopReason(len(_MessagesStopReasonIndex)-1) {
		return fmt.Sprintf("MessagesStopReason(%d)", i)
	}
	return _MessagesStopReasonName[_MessagesStopReasonIndex[i]:_MessagesStopReasonIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MessagesStopReasonNoOp() {
	var x [1]struct{}
	_ = x[MessageStopReasonEndTurn-(0)]
	_ = x[MessageStopReasonMaxTokens-(1)]
	_ = x[MessagesStopReasonStopSequence-(2)]
}

var _MessagesStopReasonValues = []MessagesStopReason{MessageStopReasonEndTurn, MessageStopReasonMaxTokens, MessagesStopReasonStopSequence}

var _MessagesStopReasonNameToValueMap = map[string]MessagesStopReason{
	_MessagesStopReasonName[0:8]:        MessageStopReasonEndTurn,
	_MessagesStopReasonLowerName[0:8]:   MessageStopReasonEndTurn,
	_MessagesStopReasonName[8:18]:       MessageStopReasonMaxTokens,
	_MessagesStopReasonLowerName[8:18]:  MessageStopReasonMaxTokens,
	_MessagesStopReasonName[18:31]:      MessagesStopReasonStopSequence,
	_MessagesStopReasonLowerName[18:31]: MessagesStopReasonStopSequence,
}

var _MessagesStopReasonNames = []string{
	_MessagesStopReasonName[0:8],
	_MessagesStopReasonName[8:18],
	_MessagesStopReasonName[18:31],
}

// MessagesStopReasonString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MessagesStopReasonString(s string) (MessagesStopReason, error) {
	if val, ok := _MessagesStopReasonNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MessagesStopReasonNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MessagesStopReason values", s)
}

// MessagesStopReasonValues returns all values of the enum
func MessagesStopReasonValues() []MessagesStopReason {
	return _MessagesStopReasonValues
}

// MessagesStopReasonStrings returns a slice of all String values of the enum
func MessagesStopReasonStrings() []string {
	strs := make([]string, len(_MessagesStopReasonNames))
	copy(strs, _MessagesStopReasonNames)
	return strs
}

// IsAMessagesStopReason returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MessagesStopReason) IsAMessagesStopReason() bool {
	for _, v := range _MessagesStopReasonValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MessagesStopReason
func (i MessagesStopReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MessagesStopReason
func (i *MessagesStopReason) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MessagesStopReason should be a string, got %s", data)
	}

	var err error
	*i, err = MessagesStopReasonString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for MessagesStopReason
func (i MessagesStopReason) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for MessagesStopReason
func (i *MessagesStopReason) UnmarshalText(text []byte) error {
	var err error
	*i, err = MessagesStopReasonString(string(text))
	return err
}
