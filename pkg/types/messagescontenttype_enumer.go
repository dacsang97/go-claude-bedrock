// Code generated by "enumer -type=MessagesContentType -linecomment -json=true -text=true"; DO NOT EDIT.

package types

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _MessagesContentTypeName = "text"

var _MessagesContentTypeIndex = [...]uint8{0, 4}

const _MessagesContentTypeLowerName = "text"

func (i MessagesContentType) String() string {
	if i < 0 || i >= MessagesContentType(len(_MessagesContentTypeIndex)-1) {
		return fmt.Sprintf("MessagesContentType(%d)", i)
	}
	return _MessagesContentTypeName[_MessagesContentTypeIndex[i]:_MessagesContentTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MessagesContentTypeNoOp() {
	var x [1]struct{}
	_ = x[MessagesContentTypeText-(0)]
}

var _MessagesContentTypeValues = []MessagesContentType{MessagesContentTypeText}

var _MessagesContentTypeNameToValueMap = map[string]MessagesContentType{
	_MessagesContentTypeName[0:4]:      MessagesContentTypeText,
	_MessagesContentTypeLowerName[0:4]: MessagesContentTypeText,
}

var _MessagesContentTypeNames = []string{
	_MessagesContentTypeName[0:4],
}

// MessagesContentTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MessagesContentTypeString(s string) (MessagesContentType, error) {
	if val, ok := _MessagesContentTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MessagesContentTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MessagesContentType values", s)
}

// MessagesContentTypeValues returns all values of the enum
func MessagesContentTypeValues() []MessagesContentType {
	return _MessagesContentTypeValues
}

// MessagesContentTypeStrings returns a slice of all String values of the enum
func MessagesContentTypeStrings() []string {
	strs := make([]string, len(_MessagesContentTypeNames))
	copy(strs, _MessagesContentTypeNames)
	return strs
}

// IsAMessagesContentType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MessagesContentType) IsAMessagesContentType() bool {
	for _, v := range _MessagesContentTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MessagesContentType
func (i MessagesContentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MessagesContentType
func (i *MessagesContentType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MessagesContentType should be a string, got %s", data)
	}

	var err error
	*i, err = MessagesContentTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for MessagesContentType
func (i MessagesContentType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for MessagesContentType
func (i *MessagesContentType) UnmarshalText(text []byte) error {
	var err error
	*i, err = MessagesContentTypeString(string(text))
	return err
}
